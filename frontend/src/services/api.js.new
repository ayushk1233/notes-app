import axios from 'axios';

// Base URL for your FastAPI backend
const BASE_URL = 'http://localhost:8001';

// Create axios instance with default config
const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor to include auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// API service functions
const notesApi = {
  // Authentication methods
  auth: {
    signup: async (userData) => {
      try {
        const response = await api.post('/auth/signup', userData);
        return response.data;
      } catch (error) {
        console.error('Error signing up:', error);
        throw error;
      }
    },

    login: async (credentials) => {
      try {
        const formData = new FormData();
        formData.append('username', credentials.username);
        formData.append('password', credentials.password);
        
        const response = await api.post('/auth/login', formData, {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        });
        
        if (response.data.access_token) {
          localStorage.setItem('token', response.data.access_token);
        }
        return response.data;
      } catch (error) {
        console.error('Error logging in:', error);
        throw error;
      }
    },

    guestLogin: async () => {
      try {
        const response = await api.post('/auth/guest');
        if (response.data.access_token) {
          localStorage.setItem('token', response.data.access_token);
        }
        return response.data;
      } catch (error) {
        console.error('Error logging in as guest:', error);
        throw error;
      }
    },

    logout: () => {
      localStorage.removeItem('token');
    }
  },

  // Note management methods
  getAllNotes: async () => {
    try {
      const response = await api.get('/notes/');
      return response.data;
    } catch (error) {
      console.error('Error fetching notes:', error);
      throw error;
    }
  },

  getNote: async (noteId) => {
    try {
      const response = await api.get(`/notes/${noteId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching note:', error);
      throw error;
    }
  },

  createNote: async (noteData) => {
    try {
      const response = await api.post('/notes/', noteData);
      return response.data;
    } catch (error) {
      console.error('Error creating note:', error);
      throw error;
    }
  },

  updateNote: async (noteId, noteData) => {
    try {
      const response = await api.put(`/notes/${noteId}`, noteData);
      return response.data;
    } catch (error) {
      console.error('Error updating note:', error);
      throw error;
    }
  },

  deleteNote: async (noteId) => {
    try {
      const response = await api.delete(`/notes/${noteId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting note:', error);
      throw error;
    }
  },

  shareNote: async (noteId) => {
    try {
      const response = await api.post(`/notes/${noteId}/share`);
      return response.data;
    } catch (error) {
      console.error('Error sharing note:', error);
      throw error;
    }
  },

  getSharedNote: async (noteId) => {
    try {
      const response = await api.get(`/shared/${noteId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching shared note:', error);
      throw error;
    }
  }
};

export default notesApi;
